top: VBox {
	bonus:		10
	name:		""
	hasRace:	true
	race:		Init    %{ return race_t.human ;  %}
	hasJob:		false
	job:		Init    %{ return job_t.fighter ; %}
	status:		Init    %{
		return Character.loadInitStatus(race_t.human) ;
	%}
	title: ImageView {
		name: "gym_title"
	}
	msg_box: TextField {
		isEditable: false
		text: Listner(name: top.name, hasRace: top.hasRace, hasJob: top.hasJob) %{
			let message = "" ;
			if(name.length == 0 || !hasRace || !hasJob){
				message += "Set following item(s): " ;
				if(name.length == 0){
					message += "character-name " ;
				}
				if(!hasRace){
					message += "race " ;
				}
				if(!hasJob){
					message += "job " ;
				}
			} else {
				message += "Press 'Add this member' button to finish "
						+  "character making." ;
			}
			return message ;
		%}
	}
	name_box: HBox {
		title: Label { text: "Character name" }
		field: TextField {
			isEditable:	true
			edited: Event(text) %{
				top.name = text ;
			%}
		}
	}
	race_box: HBox {
		title: Label { text: "Race" }
		radio: RadioButtons {
			labels: ["human",
					 "elf",
					 "dwarf",
					 "gnome",
					 "hobbit"]
			isEnabled: Listner(race: top.race) %{
				return [true, true, true, true, true] ;
			%}
			columnCount: 4
			selected: Event(index) %{
				if(index != null){
					let race = race_t.human ;
					switch(index){
						case 0: race = race_t.human ;     break ;
						case 1: race = race_t.elf ;       break ;
						case 2: race = race_t.dwarf ;     break ;
						case 3: race = race_t.gnome ;     break ;
						case 4: race = race_t.hobbit ;    break ;
					}
					if(top.race != race){
						top.race = race ;
						top.init_status(race) ;
					}
				   top.hasRace = true ;
				} else {
					top.hasRace = false ;
				}
			%}
		}
	}
	job_box: HBox {
		title: Label { text: "Job" }
		radio: RadioButtons {
			labels: ["fighter",
					 "mage",
					 "priest",
					 "thief",
					 "samurai",
					 "bishop",
					 "ninjya",
					 "lord"]
			isEnabled: Listner(status: top.status) %{
				let f = Character.hasEnoughStatusForJob(
									job_t.fighter, status) ;
				let m = Character.hasEnoughStatusForJob(
									job_t.mage,    status) ;
				let p = Character.hasEnoughStatusForJob(
									job_t.priest,  status) ;
				let t = Character.hasEnoughStatusForJob(
									job_t.thief,   status) ;
				let s = Character.hasEnoughStatusForJob(
									job_t.samurai, status) ;
				let b = Character.hasEnoughStatusForJob(
									job_t.bishop,  status) ;
				let n = Character.hasEnoughStatusForJob(
									job_t.ninjya,  status) ;
				let l = Character.hasEnoughStatusForJob(
									job_t.lord,    status) ;
				return [f, m, p, t, s, b, n, l] ;
			%}

			columnCount: 4
			selected: Event(index) %{
				if(index != null){
					let job = job_t.fighter ;
					switch(index){
						case 0: job = job_t.fighter ;     break ;
						case 1: job = job_t.mage ;        break ;
						case 2: job = job_t.priest ;      break ;
						case 3: job = job_t.thief ;       break ;
						case 4: job = job_t.samurai ;     break ;
						case 5: job = job_t.bishop ;      break ;
						case 6: job = job_t.ninjya ;      break ;
						case 7: job = job_t.lord ;        break ;
					}
					if(top.job != job){
							top.job = job ;
					}
					top.hasJob = true ;
				} else {
					top.hasJob = false ;
				}
			%}
		}
	}
	align_box: HBox {
		title: Label { text: "Alignment" }
		radio: RadioButtons {
			labels: ["good", "neutral", "evil"]
			columnCount: 4
			isEnabled: Listner(job: top.job) %{
                let good      = Character.can_get_job(job, attr_t.good) ;
                let neutral   = Character.can_get_job(job, attr_t.neutral) ;
                let evil      = Character.can_get_job(job, attr_t.evil) ;
                return [good, neutral, evil] ;
			%}
			selected: Event(index) %{
				console.log("align: " + index) ;
			%}
		}
	}
	bonus_box: HBox {
		title: Label { text: "Bonus" }
		value: Label {
			number: Listner(bonus: top.bonus) %{
				return bonus ;
			%}
		}
	}
	str_box: HBox {
		title: Label { text: "Strength" }
		stepper: Stepper {
			maxValue:	100
			minValue:	0
			currentValue:	0
			deltaValue:	1
			decimalPlaces:	0
			isIncrementable: Listner(bonus: top.bonus) %{
				return bonus > 0 ;
			%}
			changed: Event(newval) %{
				let newstat = top.status.clone() ;
				newstat.strength = newval ;
				top.bonus  -= newval - self.currentValue ;
				top.status =  newstat ;
			%}
		}
	}
	vit_box: HBox {
		title: Label { text: "Vitality" }
		stepper: Stepper {
			maxValue:		100
			minValue:		0
			currentValue:	0
			deltaValue:		1
			decimalPlaces:	0
			isIncrementable: Listner(bonus: top.bonus) %{
				return bonus > 0 ;
			%}
			changed: Event(newval) %{
				let newstat = top.status.clone() ;
				newstat.vitality = newval ;
				top.bonus  -= newval - self.currentValue ;
				top.status =  newstat ;
			%}
		}
	}
	agl_box: HBox {
		title: Label { text: "Agility" }
		stepper: Stepper {
			maxValue:		100
			minValue:		0
			currentValue:	0
			deltaValue:		1
			decimalPlaces:	0
			isIncrementable: Listner(bonus: top.bonus) %{
				return bonus > 0 ;
			%}
			changed: Event(newval) %{
				let newstat = top.status.clone() ;
				newstat.agility = newval ;
				top.bonus  -= newval - self.currentValue ;
				top.status =  newstat ;
			%}
		}
	}
	itl_box: HBox {
		title: Label { text: "Intelligence" }
		stepper: Stepper {
			maxValue:		100
			minValue:		0
			currentValue:	0
			deltaValue:		1
			decimalPlaces:	0
			isIncrementable: Listner(bonus: top.bonus) %{
				return bonus > 0 ;
			%}
			changed: Event(newval) %{
				let newstat = top.status.clone() ;
				newstat.intelligence = newval ;
				top.bonus  -= newval - self.currentValue ;
				top.status =  newstat ;
			%}
		}
	}
	pie_box: HBox {
		title: Label { text: "Piety" }
		stepper: Stepper {
			maxValue:		100
			minValue:		0
			currentValue:	0
			deltaValue:		1
			decimalPlaces:	0
			isIncrementable: Listner(bonus: top.bonus) %{
				return bonus > 0 ;
			%}
			changed: Event(newval) %{
				let newstat = top.status.clone() ;
				newstat.piety = newval ;
				top.bonus  -= newval - self.currentValue ;
				top.status =  newstat ;
			%}
		}
	}
	lck_box: HBox {
		title: Label { text: "Luck" }
		stepper: Stepper {
			maxValue:		100
			minValue:		0
			currentValue:	0
			deltaValue:		1
			decimalPlaces:	0
			isIncrementable: Listner(bonus: top.bonus) %{
				return bonus > 0 ;
			%}
			changed: Event(newval) %{
				let newstat = top.status.clone() ;
				newstat.luck = newval ;
				top.bonus  -= newval - self.currentValue ;
				top.status =  newstat ;
			%}
		}
	}
	buttons: HBox {
		add_button: Button {
			title:  "Add this member"
			isEnabled: Listner(name: top.name, hasRace: top.hasRace, hasJob: top.hasJob) %{
				return (name.length > 0) && hasRace && hasJob ;
			%}
			pressed: Event() %{
				let newrec = Record() ;
				newrec.setValue(top.name,	"name") ;
				newrec.setValue(top.race,	"race") ;
				newrec.setValue(top.job,	"job") ;
				newrec.setValue(top.status,	"status") ;
				/* Write record for character */
				leaveView(newrec) ;
			%}
		}
		cancel_button: Button {
			title:  "Cancel"
			pressed: Event() %{
				leaveView(null) ;
			%}
		}
	}

	init: Init %{
		let race   = race_t.human ;
		let status = Character.loadInitStatus(race) ;
		if(status != null){
			top.status = status ;
			top.init_status(race) ;
		}
	%}

        init_status: Func(race) %{
		/* Initialize status */
		let status = Character.loadInitStatus(race) ;
		if(status != null){
			top.str_box.stepper.currentValue = status.strength ;
			top.vit_box.stepper.currentValue = status.vitality ;
			top.agl_box.stepper.currentValue = status.agility ;
			top.itl_box.stepper.currentValue = status.intelligence ;
			top.pie_box.stepper.currentValue = status.piety ;
			top.lck_box.stepper.currentValue = status.luck ;
		} else {
			console.log("[Error] No status") ;
		}
                return 0 ;
        %}
}

