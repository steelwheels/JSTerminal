top: VBox {
	storage: Storage {
		name:	"main"
		tables: {
			init_status: "data.status.init_status",
			members:	 "data.members"
		}
	}

	bonus:		10
	name:		""
	race:		Init    %{ return race_t.human ;  %}
	job:		Init    %{ return job_t.fighter ; %}
	status:		Init    %{
		let table   = top.storage.init_status ;
		let records = table.search(race_t.human, "race") ;
		return first(records) ;
	%}

	title: ImageView {
		name: "gym_title"
	}
	msg_box: TextField {
		isEditable: false
		text: Listner(name: top.name, race: top.race, job: top.job) %{
			let message = "" ;
			if(name.length == 0 || (race != null) || (job != null)){
				message += "Set following item(s): " ;
				if(name.length == 0){
					message += "character-name " ;
				}
				if(race == null){
					message += "race " ;
				}
				if(job == null){
					message += "job " ;
				}
			} else {
				message += "Press 'Add this member' button to finish "
						+  "character making." ;
			}
			return message ;
		%}
	}
	name_box: HBox {
		title: Label { text: "Character name" }
		field: TextField {
			isEditable:	true
			edited: Event(text) %{
				top.name = text ;
			%}
		}
	}
	race_box: HBox {
		title: Label { text: "Race" }
		radio: RadioButtons {
			labels: [
			  {title: "human",	id: race_t.human	},
			  {title: "elf",	id: race_t.elf		},
			  {title: "dwarf",	id: race_t.dwarf	},
			  {title: "gnome",	id: race_t.gnome	},
			  {title: "hobbit",	id: race_t.hobbit	}
			]
			isEnabled: Listner(race: top.race) %{
				return [true, true, true, true, true] ;
			%}
			columnCount: 4
			selected: Event(race) %{
				if(race != null){
					if(top.race != race){
						top.race = race ;
						top.initialize_status(race) ;
					}
				} else {
					top.race = null ;
				}
			%}
		}
	}
	job_box: HBox {
		title: Label { text: "Job" }
		radio: RadioButtons {
			labels: [
			  {title: "fighter",	id: job_t.fighter	},
			  {title: "mage",		id: job_t.mage		},
			  {title: "priest",		id: job_t.priest	},
			  {title: "thief",		id: job_t.thief		},
			  {title: "samurai",	id: job_t.samurai	},
			  {title: "bishop",		id: job_t.bishop	},
			  {title: "ninjya",		id: job_t.ninjya	},
			  {title: "lord",		id: job_t.lord		}
			]
			isEnabled: Listner(status: top.status) %{
				let f = Character.has_status_for_job(
									job_t.fighter, status) ;
				let m = Character.has_status_for_job(
									job_t.mage,    status) ;
				let p = Character.has_status_for_job(
									job_t.priest,  status) ;
				let t = Character.has_status_for_job(
									job_t.thief,   status) ;
				let s = Character.has_status_for_job(
									job_t.samurai, status) ;
				let b = Character.has_status_for_job(
									job_t.bishop,  status) ;
				let n = Character.has_status_for_job(
									job_t.ninjya,  status) ;
				let l = Character.has_status_for_job(
									job_t.lord,    status) ;
				return [f, m, p, t, s, b, n, l] ;
			%}

			columnCount: 4
			selected: Event(job) %{
				top.job = job ;
			%}
		}
	}
	align_box: HBox {
		title: Label { text: "Alignment" }
		radio: RadioButtons {
			labels: [
				{title: "good", 	id: attr_t.good		},
				{title: "neutral",	id: attr_t.neutral	},
				{title: "evil",		id: attr_t.evil		}
			]
			columnCount: 4
			isEnabled: Listner(job: top.job) %{
				if(job != null){
					let good      = Character.can_get_job(job, attr_t.good) ;
					let neutral   = Character.can_get_job(job, attr_t.neutral) ;
					let evil      = Character.can_get_job(job, attr_t.evil) ;
					return [good, neutral, evil] ;
				} else {
					return [false, false, false] ;
				}
			%}
			selected: Event(attr) %{
				console.log("attr: " + attr) ;
			%}
		}
	}
	bonus_box: HBox {
		title: Label { text: "Bonus" }
		value: Label {
			number: Listner(bonus: top.bonus) %{
				return bonus ;
			%}
		}
	}
	str_box: HBox {
		title: Label { text: "Strength" }
		stepper: Stepper {
			maxValue:		100
			minValue:		0
			currentValue:	0
			deltaValue:		1
			decimalPlaces:	0
			isIncrementable: Listner(bonus: top.bonus) %{
				return bonus > 0 ;
			%}
			changed: Event(newval) %{
				let newstat      =  top.status ;
				newstat.strength =  newval ;
				top.bonus        -= newval - self.currentValue ;
				top.status       =  newstat ;
			%}
		}
	}
	vit_box: HBox {
		title: Label { text: "Vitality" }
		stepper: Stepper {
			maxValue:		100
			minValue:		0
			currentValue:	0
			deltaValue:		1
			decimalPlaces:	0
			isIncrementable: Listner(bonus: top.bonus) %{
				return bonus > 0 ;
			%}
			changed: Event(newval) %{
				let newstat      =  top.status ;
				newstat.vitality =  newval ;
				top.bonus        -= newval - self.currentValue ;
				top.status		 =  newstat ;
			%}
		}
	}
	agl_box: HBox {
		title: Label { text: "Agility" }
		stepper: Stepper {
			maxValue:		100
			minValue:		0
			currentValue:	0
			deltaValue:		1
			decimalPlaces:	0
			isIncrementable: Listner(bonus: top.bonus) %{
				return bonus > 0 ;
			%}
			changed: Event(newval) %{
				let newstat     =  top.status ;
				newstat.agility =  newval ;
				top.bonus       -= newval - self.currentValue ;
				top.status		=  newstat ;
			%}
		}
	}
	itl_box: HBox {
		title: Label { text: "Intelligence" }
		stepper: Stepper {
			maxValue:		100
			minValue:		0
			currentValue:	0
			deltaValue:		1
			decimalPlaces:	0
			isIncrementable: Listner(bonus: top.bonus) %{
				return bonus > 0 ;
			%}
			changed: Event(newval) %{
				let newstat			 =  top.status ;
				newstat.intelligence =  newval ;
				top.bonus  			 -= newval - self.currentValue ;
				top.status			 =  newstat ;
			%}
		}
	}
	pie_box: HBox {
		title: Label { text: "Piety" }
		stepper: Stepper {
			maxValue:		100
			minValue:		0
			currentValue:	0
			deltaValue:		1
			decimalPlaces:	0
			isIncrementable: Listner(bonus: top.bonus) %{
				return bonus > 0 ;
			%}
			changed: Event(newval) %{
				let newstat		=  top.status ;
				newstat.piety	=  newval ;
				top.bonus		-= newval - self.currentValue ;
				top.status		=  newstat ;
			%}
		}
	}
	lck_box: HBox {
		title: Label { text: "Luck" }
		stepper: Stepper {
			maxValue:		100
			minValue:		0
			currentValue:	0
			deltaValue:		1
			decimalPlaces:	0
			isIncrementable: Listner(bonus: top.bonus) %{
				return bonus > 0 ;
			%}
			changed: Event(newval) %{
				let newstat		=  top.status ;
				newstat.luck	=  newval ;
				top.bonus		-= newval - self.currentValue ;
				top.status		=  newstat ;
			%}
		}
	}
	buttons: HBox {
		add_button: Button {
			title:  "Add this member"
			isEnabled: Listner(name: top.name, race: top.race, job: top.job) %{
				return (name.length > 0) && (race != null) && (job != null) ;
			%}
			pressed: Event() %{
				let table  = top.storage.members ;
				let newrec = table.newRecord() ;
				newrec.setValue(top.name,	"name") ;
				newrec.setValue(top.race,	"race") ;
				newrec.setValue(top.job,	"job") ;
				newrec.setValue(top.status,	"status") ;
				/* Write record for character */
				leaveView(newrec) ;
			%}
		}
		cancel_button: Button {
			title:  "Cancel"
			pressed: Event() %{
				leaveView(null) ;
			%}
		}
	}

	init: Init %{
		top.initialize_status(race_t.human) ;
	%}

	initialize_status: Func(race) %{
		let table   = top.storage.init_status ;
		let records = table.search(race, "race") ;
		let status  = first(records) ;

		/* Initialize status */
		if(status != null){
			top.str_box.stepper.currentValue = status.strength ;
			top.vit_box.stepper.currentValue = status.vitality ;
			top.agl_box.stepper.currentValue = status.agility ;
			top.itl_box.stepper.currentValue = status.intelligence ;
			top.pie_box.stepper.currentValue = status.piety ;
			top.lck_box.stepper.currentValue = status.luck ;
			top.status						 = status ;
		} else {
			console.log("[Error] No status") ;
		}
	%}
}

