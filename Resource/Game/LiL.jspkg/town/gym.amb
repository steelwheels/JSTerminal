top: VBox {
	bonus:		Int	10
        race:           Int 	0
	status:		Object	{ }
	title: Image {
		name: String "gym_title"
	}
	bonus_box: HBox {
		title: Label { text: String "Bonus" }
		value: Label {
			number: Int Listner(bonus: top.bonus) %{
				return bonus ;
			%}
	    	}
	}
        race_box: HBox {
                title: Label { text: String "Race" }
                race_menu: PopupMenu {
                        items: Array [	"human",
					"elf",
					"dwarf",
					"gnome",
					"hobbit"] ;
                        selected: Event(index) %{
                                if(top.race != index){
                                        top.race = index ;
                                        top.init_status(index) ;
                                }
                        %}
                }
        }
	hp_box: HBox {
		title: Label { text: String "HitPoint" }
		stepper: Stepper {
			maxValue:	Int 100
			minValue:	Int   0
			currentValue:	Int  20
			deltaValue:	Int   1
			decimalPlaces:	Int   0
			isIncrementable: Bool Listner(bonus: top.bonus) %{
				return bonus > 0 ;
			%}
			changed: Event(newval) %{
				let diff = newval - self.currentValue ;
				top.bonus -= diff ;
			%}
		}
	}
	mp_box: HBox {
		title: Label { text: String "MagicPoint" }
		stepper: Stepper {
			maxValue:	Int 100
			minValue:	Int   0
			currentValue:	Int  20
			deltaValue:	Int   1
			decimalPlaces:	Int   0
			isIncrementable: Bool Listner(bonus: top.bonus) %{
				return bonus > 0 ;
			%}
			changed: Event(newval) %{
				let diff = newval - self.currentValue ;
				top.bonus -= diff ;
			%}
		}
	}
	str_box: HBox {
		title: Label { text: String "Strength" }
		stepper: Stepper {
			maxValue:	Int 100
			minValue:	Int   0
			currentValue:	Int  20
			deltaValue:	Int   1
			decimalPlaces:	Int   0
			isIncrementable: Bool Listner(bonus: top.bonus) %{
				return bonus > 0 ;
			%}
			changed: Event(newval) %{
				let diff = newval - self.currentValue ;
				top.bonus -= diff ;
			%}
		}
	}
	vit_box: HBox {
		title: Label { text: String "Vitality" }
		stepper: Stepper {
			maxValue:	Int 100
			minValue:	Int   0
			currentValue:	Int  20
			deltaValue:	Int   1
			decimalPlaces:	Int   0
			isIncrementable: Bool Listner(bonus: top.bonus) %{
				return bonus > 0 ;
			%}
			changed: Event(newval) %{
				let diff = newval - self.currentValue ;
				top.bonus -= diff ;
			%}
		}
	}
	dex_box: HBox {
		title: Label { text: String "Dexterity" }
		stepper: Stepper {
			maxValue:	Int 100
			minValue:	Int   0
			currentValue:	Int  20
			deltaValue:	Int   1
			decimalPlaces:	Int   0
			isIncrementable: Bool Listner(bonus: top.bonus) %{
				return bonus > 0 ;
			%}
			changed: Event(newval) %{
				let diff = newval - self.currentValue ;
				top.bonus -= diff ;
			%}
		}
	}
	agl_box: HBox {
		title: Label { text: String "Agility" }
		stepper: Stepper {
			maxValue:	Int 100
			minValue:	Int   0
			currentValue:	Int  20
			deltaValue:	Int   1
			decimalPlaces:	Int   0
			isIncrementable: Bool Listner(bonus: top.bonus) %{
				return bonus > 0 ;
			%}
			changed: Event(newval) %{
				let diff = newval - self.currentValue ;
				top.bonus -= diff ;
			%}
		}
	}
	itl_box: HBox {
		title: Label { text: String "Intelligence" }
		stepper: Stepper {
			maxValue:	Int 100
			minValue:	Int   0
			currentValue:	Int  20
			deltaValue:	Int   1
			decimalPlaces:	Int   0
			isIncrementable: Bool Listner(bonus: top.bonus) %{
				return bonus > 0 ;
			%}
			changed: Event(newval) %{
				let diff = newval - self.currentValue ;
				top.bonus -= diff ;
			%}
		}
	}
	pie_box: HBox {
		title: Label { text: String "Piety" }
		stepper: Stepper {
			maxValue:	Int 100
			minValue:	Int   0
			currentValue:	Int  20
			deltaValue:	Int   1
			decimalPlaces:	Int   0
			isIncrementable: Bool Listner(bonus: top.bonus) %{
				return bonus > 0 ;
			%}
			changed: Event(newval) %{
				let diff = newval - self.currentValue ;
				top.bonus -= diff ;
			%}
		}
	}
	lck_box: HBox {
		title: Label { text: String "Luck" }
		stepper: Stepper {
			maxValue:	Int 100
			minValue:	Int   0
			currentValue:	Int  20
			deltaValue:	Int   1
			decimalPlaces:	Int   0
			isIncrementable: Bool Listner(bonus: top.bonus) %{
				return bonus > 0 ;
			%}
			changed: Event(newval) %{
				let diff = newval - self.currentValue ;
				top.bonus -= diff ;
			%}
		}
	}
	buttons: HBox {
		add_button: Button {
			title:  String "Add this member"
			pressed: Event() %{
				leaveView(top.status) ;
			%}
		}
		cancel_button: Button {
			title:  String "Cancel"
			pressed: Event() %{
				leaveView(null) ;
			%}
		}
	}

        init_status: Int Func(race) %{
		/* Initialize status */
		let status = Character.initStatus(race) ;
		if(status != null){
			top.hp_box.stepper.currentValue  = status.hitPoint ;
			top.mp_box.stepper.currentValue  = status.magicPoint ;
			top.str_box.stepper.currentValue = status.strength ;
			top.vit_box.stepper.currentValue = status.vitality ;
			top.dex_box.stepper.currentValue = status.dexterity ;
			top.agl_box.stepper.currentValue = status.agility ;
			top.itl_box.stepper.currentValue = status.intelligence ;
			top.pie_box.stepper.currentValue = status.piety ;
			top.lck_box.stepper.currentValue = status.luck ;
			top.status = status ;
		} else {
			console.log("[Error] No status") ;
		}
                return 0 ;
        %}
}

