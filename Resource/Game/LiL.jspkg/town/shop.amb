top: VBox {
	global: Dictionary {
		storage:	"main"
		path:		"data.global.dict"
	}
	having_weapons: Table {
		storage:	"main"
		path:		"data.having.weapons"
	}
	weapons: Table {
		storage:	"main"
		path:		"data.list.weapons"
	}

	title: ImageView {
		name: "shop_title"
	}

    weapon_table: TableView {
		hasHeader:    true
		fieldNames: [
			{field:"count",		title:"Count"},
			{field:"name",     	title:"Name"},
			{field:"price",		title:"Price"},
			{field:"fmatch",	title:"F"},
			{field:"mmatch",	title:"M"},
			{field:"pmatch",	title:"P"},
			{field:"tmatch",	title:"T"},
			{field:"smatch",	title:"S"},
			{field:"bmatch",	title:"B"},
			{field:"nmatch",	title:"N"},
			{field:"lmatch",	title:"L"}
		]
		init: Init %{
			self.dataTable = top.weapons.table() ;
			self.reload() ;
		%}
		filter: Event(rec) %{
			return (rec.price > 0) ;
		%}
		isEnable: Func(self, record) %{
			return top.global.dictionary.money >= record.price ;
		%}
		virtualFields: Object {
			count:	Func(self, record) %{
					let hrecs = top.having_weapons.search(
						"weapon_id", record.weapon_id) ;
					if(hrecs.length > 0){
						let hrec = hrecs[0] ;
						if(isNumber(hrec.count)){
							return hrec.count ;
						}
					}
					return 0 ;
			%}
			name: Func(self, record) %{
					let hrecs = top.having_weapons.search(
						"weapon_id", record.weapon_id) ;
					if(hrecs.length > 0){
						let hrec = hrecs[0] ;
						if(hrec.isKnown){
							return record.long_name ;
						}
					}
					return record.short_name ;
			%}
			fmatch: Func(self, record) %{
				return self.xmatch(job_t.fighter, record) ;
			%}
			mmatch: Func(self, record) %{
				return self.xmatch(job_t.mage, record) ;
			%}
			pmatch: Func(self, record) %{
				return self.xmatch(job_t.priest, record) ;
			%}
			tmatch: Func(self, record) %{
				return self.xmatch(job_t.thief, record) ;
			%}
			smatch: Func(self, record) %{
				return self.xmatch(job_t.samurai, record) ;
			%}
			bmatch: Func(self, record) %{
				return self.xmatch(job_t.bishop, record) ;
			%}
			nmatch: Func(self, record) %{
				return self.xmatch(job_t.ninjya, record) ;
			%}
			lmatch: Func(self, record) %{
				return self.xmatch(job_t.lord, record) ;
			%}
		}
		xmatch: Func(job, record) %{
			if(Character.is_job_in_string(job, record.match)){
				return "Y" ;
			} else {
				return "N" ;
			}
		%}
    }

	money_label: HBox {
		title: Label {
			text: "You have: "
		}
		money: Label {
			number: Listner(global: top.global.dictionary) %{
				return global.money ;
			%}
		}
	}

	buy_button: Button {
		title: "Buy the selected item"
		isEnabled: Listner(didsel: top.weapon_table.didSelected) %{
			return didsel ;
		%}
		pressed: Event() %{
			let rec = top.weapon_table.selectedRecord() ;
			if(rec != null){
				let wid      = rec.weapon_id ;
				let haverecs = top.having_weapons.search("weapon_id", wid) ;
				if(haverecs.length > 0){
					/* Update weapon count */
					haverecs[0].count += 1 ;
    				top.weapon_table.reload() ;
				} else {
					/* Add new weapon */
					let newrec =  top.having_weapons.newRecord() ;
					newrec.weapon_id = wid ;
					newrec.isKnown   = true ;
					newrec.count     = 1 ;
					top.having_weapons.append(newrec) ;
				}
				/* Enter purchase view */
				let isknown = false ;
				let hrecs  = top.having_weapons.search("weapon_id", wid) ;
				if(hrecs.length > 0){
					isknown = hrecs[0].isKnown ;
				}
				enterView("purchase", {
					weapon_id: wid, is_known: isknown
				}) ;
				/* Update money */
				top.global.dictionary.money -= rec.price ;
			}
		%}
	}

	ret_button: Button {
		title:  "Return to town"
		pressed: Event() %{
			leaveView(0) ;
		%}
	}
}

